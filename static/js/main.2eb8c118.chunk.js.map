{"version":3,"sources":["reducer/UserReducer.js","context/UserContext.js","components/TopNav/TopNav.js","data/dynamicLinks.js","data/staticLinks.js","components/LeftNav/LeftNav.js","components/LeftNav/DynamicLinks.js","data/questions.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","name","surname","gender","initialState","UserContext","createContext","UserProvider","children","useReducer","UserReducer","dispatch","Provider","value","user","addName","addSurname","addGender","Consumer","TopNav","activeUser","useContext","className","Navbar","Brand","href","style","fill","height","width","text","route","LeftNav","useState","toggle","setToggle","bg","expand","Toggle","aria-controls","onClick","Collapse","id","Nav","dynamicLinks","map","link","Link","staticLinks","question","answers","Main","data","questions","length","total","questionNb","setQuestionNb","answerFactory","number","answer","key","placeholder","onChange","e","target","handleTextInput","handleSelectInput","Container","Card","Header","Body","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2eb8c118.chunk.js","sourcesContent":["// REDUCER POUR FACILITER LA MANIPULATION DES STATES GLOBAUX DANS CONTEXT\nexport default (state, action) => {\n    switch (action.type) {\n        case 'ADD_NAME':\n            return {\n                ...state,\n                name: action.name,\n            };\n        case 'ADD_SURNAME':\n            return {\n                ...state,\n                surname: action.surname\n            };\n        case 'ADD_GENDER':\n            return {\n                ...state,\n                gender: action.gender\n            };\n        default: return state;\n    }\n}","import React, { createContext, useReducer } from 'react'\nimport UserReducer from '../reducer/UserReducer'\n\nconst initialState = { name: \"\", surname:\"\", gender:\"\" }\nconst UserContext = createContext(initialState)\n\nexport const UserProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(UserReducer, initialState)\n\n    const addName = (value) => {\n        dispatch({type: 'ADD_NAME', name: value})\n    }\n    const addSurname = (value) => {\n        dispatch({type: 'ADD_SURNAME', surname: value})\n    }\n    const addGender = (value) => {\n        dispatch({type: 'ADD_GENDER', gender: value})\n    }\n\n    return(\n        <UserContext.Provider value={{user: state, addName, addSurname, addGender}}>{ children }</UserContext.Provider>\n    )\n}\n\n\nexport const UserConsumer = UserContext.Consumer\n\nexport default UserContext","import React, { useContext } from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport { GiHealthNormal } from 'react-icons/gi'\nimport { FaUserCircle } from 'react-icons/fa'\nimport UserContext from '../../context/UserContext'\n\nimport './TopNav.css'\n\nexport default function TopNav() {\n    const activeUser = useContext(UserContext)\n    return(\n        <div className=\"topNavMain\">\n            <Navbar className=\"topNavBar\">\n                <Navbar.Brand href=\"#home\">\n                <GiHealthNormal style={{fill: \"white\", height: \"2.2em\", width: \"2.2em\"}}/>\n                </Navbar.Brand>\n\n            <div className=\"userNavContainer\">\n                <div className=\"userNav\">\n                    <FaUserCircle style={{fill: \"white\", height: \"2.2em\", width: \"3.2em\"}}/>\n                    {activeUser.user.name !== \"\" ? <h2>{activeUser.user.name} {activeUser.user.surname}</h2> : <h2>Utilisateur</h2> }\n                </div>\n            </div>\n            </Navbar>\n        </div>\n    )\n}","// LIENS DU HAUT DE LA SIDEBAR, QUI PEUVENT VARIER EN FONCTION DE LA VUE\nexport default [{\n    text: \"1ère visite\",\n    route: \"/home\"\n    },\n    {\n    text: \"Adaptation\",\n    route: \"/home\"\n    },\n    {\n    text: \"Essais\",\n    route: \"/home\"\n    },\n    {\n    text: \"Appareillés\",\n    route: \"/home\"\n    }\n]","// LIENS DU BAS DE LA SIDEBAR, QUI NE VARIENT PAS EN FONCTION DE LA VUE\nexport default [{\n    text: \"1ère visite\",\n    route: \"/home\"\n    },\n    {\n    text: \"Statistiques\",\n    route: \"/home\"\n    }\n]","import React, { useState } from 'react'\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\nimport DynamicLinksFactory from './DynamicLinks'\nimport staticLinks from '../../data/staticLinks'\nimport './LeftNav.css'\n\nconst staticLinksFactory = () => {\n    return staticLinks.map(link => <Nav.Link href={link.route}>{link.text}</Nav.Link>\n    )\n}\n\nexport default function LeftNav() {\n    const [toggle, setToggle] = useState(false)\n    return(\n        <Navbar bg=\"light\" expand=\"lg\" className={`flex-column sidebar ${toggle ? \"toggled\" : false}`}>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" onClick={() => setToggle(!toggle)}/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <div className=\"sidebarTop\">\n                        {DynamicLinksFactory()}\n                    </div>\n                    <div className=\"sidebarBottom\">\n                        {staticLinksFactory()}\n                    </div>\n                </Nav>\n                \n            </Navbar.Collapse>\n        </Navbar>\n    )\n}","import React from 'react'\nimport Nav from 'react-bootstrap/Nav'\nimport dynamicLinks from '../../data/dynamicLinks'\n\nexport default function DynamicLinksFactory() {\n    return dynamicLinks.map(link => <Nav.Link href={link.route}>{link.text}</Nav.Link>\n    )\n}","export default [\n    {\n        question: \"Peux-tu indiquer l'identité du patient ?\",\n        answers: [\"Nom\", \"Prénom\"],\n        type: \"text\"\n    },\n    {\n        question: \"Peux-tu indiquer son sexe ?\",\n        answers: [\"Homme\", \"Femme\"],\n        type: \"button\"\n    }\n]","import React, { useState, useContext } from 'react'\nimport questions from '../../data/questions'\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card'\nimport UserContext from '../../context/UserContext'\n\nimport { FaLongArrowAltRight, FaLongArrowAltLeft } from 'react-icons/fa'\nimport './Main.css'\n\nexport default function Main() {\n    const [total, setTotal] = useState(questions.length)\n    const [questionNb, setQuestionNb] = useState(0)\n    const {user, addName, addSurname, addGender} = useContext(UserContext)\n\n    // GESTION DES DONNES FOURNIES PAR L'UTILISATEUR\n    const handleTextInput = (e) => {\n        e.target.placeholder === \"Nom\" ? addSurname(e.target.value) : addName(e.target.value) \n    }\n    const handleSelectInput = (e) => {\n        addGender(e.target.value)\n    }\n\n    // DISPLAY DYNAMIQUE DES QUESTIONS A PARTIR DU DICTIONNAIRE DE QUESTIONS\n    function questionFactory(data, number) {\n        return data[number].question\n    }\n    // DISPLAY DYNAMIQUE DES REPONSES A PARTIR DU DICTIONNAIRE DE QUESTIONS\n    function answerFactory(data, number) {\n        return data[number].answers.map(answer => {\n            return data[number].type === \"text\" ? \n            <input key={answer} type={data[number].type} placeholder={answer} className={data[number].type} onChange={e => handleTextInput(e)} />\n            :\n            <input key={answer} type={data[number].type} placeholder={answer} value={answer} className={data[number].type} onClick={e => handleSelectInput(e)} />\n        })\n    }\n\n    // DISPLAY DYNAMIQUE DE LA DERNIERE VUE\n    function greetingsFactory(data){\n        return data.gender !== \"\"?\n            data.gender === \"Homme\" ? <h2>Monsieur {data.surname} {data.name}</h2> : <h2>Madame {data.surname} {data.name}</h2>\n        :\n            <h2>Veuillez remplir le formulaire</h2>\n    }\n\n    function mainCard() {\n        return(\n            <Container>\n                    {/* S'IL RESTE DES QUESTIONS A POSER, LES VUES AVEC LES QUESTIONS SERONT AFFICHEES */}\n                {total > questionNb ?\n                    <Card className=\"text-center\">\n                        <Card.Header>\n                            <div className=\"formReturnBtn\">\n                                {questionNb > 0 ? <button onClick={() => setQuestionNb(questionNb - 1)}><FaLongArrowAltLeft style={{fill: \"#199AA6\", height: \"1.5em\", width: \"1.5em\"}}/></button> : false }\n                                <h3>{questionFactory(questions, questionNb)}</h3>\n                            </div>\n                        </Card.Header>\n                        <Card.Body>\n                            <div className=\"formAnswer\">\n                                {answerFactory(questions, questionNb)}\n                            </div>\n                                <button onClick={() => setQuestionNb(questionNb + 1)}><FaLongArrowAltRight style={{fill: \"white\", height: \"2.2em\", width: \"3.2em\"}}/></button>\n                        </Card.Body>\n                    </Card>\n                        :\n                        // SI TOUTES LES QUESTIONS ONT ÉTÉES REPONDUES ON PASSE A LA DERNIERE VUE\n                    <Card className=\"text-center\">\n                        <Card.Body>\n                            <div className=\"formAnswer\">\n                                {greetingsFactory(user)}\n                            </div>\n                            <button onClick={() => setQuestionNb(questionNb - 1)}><FaLongArrowAltLeft style={{fill: \"white\", height: \"2.2em\", width: \"3.2em\"}}/></button>\n                        </Card.Body>\n                    </Card>\n                    }\n            </Container>\n        )\n    }\n\n    return (\n        <div className=\"main\">\n            {mainCard()}\n        </div>\n    )\n}","import React from 'react';\nimport TopNav from './components/TopNav/TopNav'\nimport LeftNav from './components/LeftNav/LeftNav'\nimport Main from './components/Main/Main'\nimport { UserProvider } from './context/UserContext'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <UserProvider>\n      <div className=\"App\">\n          <TopNav />\n          <LeftNav />\n          <Main />\n      </div>\n    </UserProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}